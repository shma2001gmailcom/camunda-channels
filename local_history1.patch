Index: src/main/java/org/misha/customer/data/TermsMessageContent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/org/misha/customer/data/TermsMessageContent.java	(revision )
+++ src/main/java/org/misha/customer/data/TermsMessageContent.java	(revision )
@@ -0,0 +1,12 @@
+package org.misha.customer.data;
+
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@NoArgsConstructor
+public class TermsMessageContent {
+    private String id;
+    private int left;
+    private int right;
+}
Index: src/main/java/org/misha/customer/messages/send/impl/TermsSenderConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/org/misha/customer/messages/send/impl/TermsSenderConfig.java	(revision )
+++ src/main/java/org/misha/customer/messages/send/impl/TermsSenderConfig.java	(revision )
@@ -4,23 +4,14 @@
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import org.springframework.context.annotation.Primary;
 import org.springframework.messaging.MessageChannel;
 
 @Configuration
 class TermsSenderConfig {
-    @Autowired
-    private MessageChannel output;//1
 
     @Bean
-    TermsMessageSender messageSender() {
-        return new TermsMessageSender(output());
-    }
-
-    @Bean
-    @Qualifier("output")
-    @Primary
-    MessageChannel output() {
-        return output;
+    @Autowired
+    TermsMessageSender messageSender(final @Qualifier("output") MessageChannel output) {
+        return new TermsMessageSender(output);
     }
 }
\ No newline at end of file
Index: src/main/java/org/misha/customer/messages/send/impl/TermsMessageSender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/org/misha/customer/messages/send/impl/TermsMessageSender.java	(revision )
+++ src/main/java/org/misha/customer/messages/send/impl/TermsMessageSender.java	(revision )
@@ -17,7 +17,7 @@
 public class TermsMessageSender implements Sender {
     private final MessageChannel output;
 
-    public TermsMessageSender(@Qualifier("output") MessageChannel channel) {
+    TermsMessageSender(@Qualifier("output") MessageChannel channel) {
         this.output = channel;
         log.debug("channel: {} is {}", output.getClass(), output);
     }
@@ -29,7 +29,7 @@
 
     @Override
     public void send(Message<?> m) {
-        log.debug("\n\nSender: {};\nmessage: {}", this.getClass().getSimpleName(), m);
+        log.debug("\n\n---------------\n\nSender: {};\nmessage: {}", this.getClass().getSimpleName(), m);
         supplyAsync(() -> {
             Sender.super.send(m);
             return null;
Index: src/main/java/org/misha/customer/TermsMessageContent.java
===================================================================
--- src/main/java/org/misha/customer/TermsMessageContent.java	(revision )
+++ src/main/java/org/misha/customer/TermsMessageContent.java	(revision )
@@ -1,12 +0,0 @@
-package org.misha.customer;
-
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-@Data
-@NoArgsConstructor
-public class TermsMessageContent {
-    private String id;
-    private int left;
-    private int right;
-}
Index: src/main/java/org/misha/contractor/data/SumMessageContent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/org/misha/contractor/data/SumMessageContent.java	(revision )
+++ src/main/java/org/misha/contractor/data/SumMessageContent.java	(revision )
@@ -0,0 +1,12 @@
+package org.misha.contractor.data;
+
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@NoArgsConstructor
+public class SumMessageContent {
+    private int sum;
+    private int left;
+    private int right;
+}
Index: src/main/java/org/misha/contractor/service/Adder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/org/misha/contractor/service/Adder.java	(revision )
+++ src/main/java/org/misha/contractor/service/Adder.java	(revision )
@@ -0,0 +1,15 @@
+package org.misha.contractor.service;
+
+import org.springframework.stereotype.Component;
+
+import java.util.concurrent.Future;
+
+import static java.util.concurrent.CompletableFuture.supplyAsync;
+
+@Component
+public class Adder {
+
+    public Future<Integer> sum(int left, int right) {
+        return supplyAsync(() -> left + right);
+    }
+}
Index: src/main/java/org/misha/contractor/messages/send/impl/SumSenderConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/org/misha/contractor/messages/send/impl/SumSenderConfig.java	(revision )
+++ src/main/java/org/misha/contractor/messages/send/impl/SumSenderConfig.java	(revision )
@@ -8,17 +8,6 @@
 
 @Configuration
 class SumSenderConfig {
-<<<<<<< HEAD
-    @Autowired
-    private MessageChannel output;
-
-    @Bean
-    SumMessageSender sumMessageSender() {
-        return new SumMessageSender(output);
-    }
-
-=======
->>>>>>> origin/master
     @Bean
     @Autowired
     SumMessageSender sumMessageSender(@Qualifier("output") MessageChannel output) {
Index: src/main/java/org/misha/contractor/messages/send/impl/SumMessageSender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/org/misha/contractor/messages/send/impl/SumMessageSender.java	(revision )
+++ src/main/java/org/misha/contractor/messages/send/impl/SumMessageSender.java	(revision )
@@ -28,7 +28,7 @@
 
     @Override
     public void send(Message<?> m) {
-        log.debug("\n\nSender: {};\nmessage: {}", this.getClass().getSimpleName(), m);
+        log.debug("\n\n---------------\n\nSender: {};\nmessage: {}", this.getClass().getSimpleName(), m);
         supplyAsync(() -> {
             Sender.super.send(m);
             return null;
Index: src/main/java/org/misha/contractor/messages/receive/CustomersMessageListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/org/misha/contractor/messages/receive/CustomersMessageListener.java	(revision )
+++ src/main/java/org/misha/contractor/messages/receive/CustomersMessageListener.java	(revision )
@@ -32,7 +32,7 @@
 
     @StreamListener(target = Sink.INPUT, condition = "(headers['messageType']?:'').startsWith('Terms')")
     public void messageReceived(String messageJson) throws Exception {
-        log.debug("\n\n---------------\n\nReceiver: {};\n json received={}", getClass().getSimpleName(), messageJson);
+        log.debug("\n\n---------------\n\nReceiver: json received={}", messageJson);
         final TypeReference<Message<TermsMessageContent>> typeRef =
                 new TypeReference<Message<TermsMessageContent>>() {};
         final Message<TermsMessageContent> message = new ObjectMapper().readValue(messageJson, typeRef);
Index: src/main/java/org/misha/contractor/SumMessageContent.java
===================================================================
--- src/main/java/org/misha/contractor/SumMessageContent.java	(revision )
+++ src/main/java/org/misha/contractor/SumMessageContent.java	(revision )
@@ -1,12 +0,0 @@
-package org.misha.contractor;
-
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-@Data
-@NoArgsConstructor
-public class SumMessageContent {
-    private int sum;
-    private int left;
-    private int right;
-}
Index: src/main/java/org/misha/contractor/Adder.java
===================================================================
--- src/main/java/org/misha/contractor/Adder.java	(revision )
+++ src/main/java/org/misha/contractor/Adder.java	(revision )
@@ -1,15 +0,0 @@
-package org.misha.contractor;
-
-import org.springframework.stereotype.Component;
-
-import java.util.concurrent.Future;
-
-import static java.util.concurrent.CompletableFuture.supplyAsync;
-
-@Component
-public class Adder {
-
-    public Future<Integer> sum(int left, int right) {
-        return supplyAsync(() -> left + right);
-    }
-}
Index: src/main/java/org/misha/JsonGenerationException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/org/misha/JsonGenerationException.java	(revision )
+++ src/main/java/org/misha/JsonGenerationException.java	(revision )
@@ -0,0 +1,10 @@
+package org.misha;
+
+public class JsonGenerationException extends RuntimeException {
+    protected JsonGenerationException(final String message,
+                                      final Throwable cause
+
+    ) {
+        super(message, cause, false, true);
+    }
+}
Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/application.properties	(revision )
+++ src/main/resources/application.properties	(revision )
@@ -26,7 +26,7 @@
 camunda.bpm.filter.create=All
 camunda.bpm.license-file=file:${user.home}/.camunda/license.txt
 
-logging.file=../logs/camunda-template-0.log
+logging.file=../../logs/camunda-channels.log
 logging.level.org.apache.tomcat=info
 logging.level.org.apache.catalina=info
 logging.level.org.misha=DEBUG
Index: bash/run
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bash/run	(revision )
+++ bash/run	(revision )
@@ -0,0 +1,14 @@
+#!/usr/bin/env bash
+
+cd ../target
+port=8090
+app=camunda-channels-0.0.1-SNAPSHOT
+x=`echo $(lsof -i :${port})`
+if [[ ! ${x} ]]; then
+    java -jar ${app}.jar
+    google-chrome-stable http://localhost:${port}
+else
+    echo "port already in use"
+    exit 1
+fi
+
Index: bash/build
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bash/build	(revision )
+++ bash/build	(revision )
@@ -0,0 +1,3 @@
+#!/usr/bin/env bash
+cd ..
+mvn clean install
\ No newline at end of file
Index: bash/grep-pid
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bash/grep-pid	(revision )
+++ bash/grep-pid	(revision )
@@ -0,0 +1,3 @@
+#!/usr/bin/env bash
+
+ps aux | grep -i $1 | grep -v grep | awk '{print $2, $11}'
\ No newline at end of file
Index: bash/create-topics
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bash/create-topics	(revision )
+++ bash/create-topics	(revision )
@@ -0,0 +1,8 @@
+#!/usr/bin/env bash
+
+export $(grep -v '^#' ./environment.properties | xargs)
+if [ ! "$(ps axf | grep kafka | grep -v grep)" ]; then
+    echo "Kafka server haven\'t been started yet." exit 1;
+fi
+./make-topic customer-to-contractor
+./make-topic contractor-to-customer
\ No newline at end of file
Index: bash/who-occupies-port
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bash/who-occupies-port	(revision )
+++ bash/who-occupies-port	(revision )
@@ -0,0 +1,3 @@
+#!/usr/bin/env bash
+
+lsof -i :$1
Index: bash/build.sh
===================================================================
--- bash/build.sh	(revision )
+++ bash/build.sh	(revision )
@@ -1,3 +0,0 @@
-#!/usr/bin/env bash
-cd ..
-mvn clean install
\ No newline at end of file
Index: bash/run.sh
===================================================================
--- bash/run.sh	(revision )
+++ bash/run.sh	(revision )
@@ -1,3 +0,0 @@
-#!/usr/bin/env bash
-cd ../target
-java -jar camunda-channels-0.0.1-SNAPSHOT.jar
\ No newline at end of file
Index: .idea/shelf/local_history_patch/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/shelf/local_history_patch/shelved.patch	(revision )
+++ .idea/shelf/local_history_patch/shelved.patch	(revision )
@@ -0,0 +1,326 @@
+Index: src/main/java/org/misha/contractor/service/Adder.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/org/misha/contractor/service/Adder.java	
++++ src/main/java/org/misha/contractor/service/Adder.java	
+@@ -1,15 +0,0 @@
+-package org.misha.contractor;
+-
+-import org.springframework.stereotype.Component;
+-
+-import java.util.concurrent.Future;
+-
+-import static java.util.concurrent.CompletableFuture.supplyAsync;
+-
+-@Component
+-public class Adder {
+-
+-    public Future<Integer> sum(int left, int right) {
+-        return supplyAsync(() -> left + right);
+-    }
+-}
+Index: src/main/java/org/misha/customer/data/TermsMessageContent.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/org/misha/customer/data/TermsMessageContent.java	
++++ src/main/java/org/misha/customer/data/TermsMessageContent.java	
+@@ -1,12 +0,0 @@
+-package org.misha.customer;
+-
+-import lombok.Data;
+-import lombok.NoArgsConstructor;
+-
+-@Data
+-@NoArgsConstructor
+-public class TermsMessageContent {
+-    private String id;
+-    private int left;
+-    private int right;
+-}
+Index: src/main/java/org/misha/customer/messages/send/impl/TermsSenderConfig.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/org/misha/customer/messages/send/impl/TermsSenderConfig.java	
++++ src/main/java/org/misha/customer/messages/send/impl/TermsSenderConfig.java	
+@@ -4,23 +4,14 @@
+ import org.springframework.beans.factory.annotation.Qualifier;
+ import org.springframework.context.annotation.Bean;
+ import org.springframework.context.annotation.Configuration;
+-import org.springframework.context.annotation.Primary;
+ import org.springframework.messaging.MessageChannel;
+ 
+ @Configuration
+ class TermsSenderConfig {
+-    @Autowired
+-    private MessageChannel output;//1
+ 
+     @Bean
+-    TermsMessageSender messageSender() {
+-        return new TermsMessageSender(output());
+-    }
+-
+-    @Bean
+-    @Qualifier("output")
+-    @Primary
+-    MessageChannel output() {
+-        return output;
++    @Autowired
++    TermsMessageSender messageSender(final @Qualifier("output") MessageChannel output) {
++        return new TermsMessageSender(output);
+     }
+ }
+\ No newline at end of file
+Index: src/main/java/org/misha/contractor/messages/receive/CustomersMessageListener.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/org/misha/contractor/messages/receive/CustomersMessageListener.java	
++++ src/main/java/org/misha/contractor/messages/receive/CustomersMessageListener.java	
+@@ -32,7 +32,7 @@
+ 
+     @StreamListener(target = Sink.INPUT, condition = "(headers['messageType']?:'').startsWith('Terms')")
+     public void messageReceived(String messageJson) throws Exception {
+-        log.debug("\n\n---------------\n\nReceiver: {};\n json received={}", getClass().getSimpleName(), messageJson);
++        log.debug("\n\n---------------\n\nReceiver: json received={}", messageJson);
+         final TypeReference<Message<TermsMessageContent>> typeRef =
+                 new TypeReference<Message<TermsMessageContent>>() {};
+         final Message<TermsMessageContent> message = new ObjectMapper().readValue(messageJson, typeRef);
+Index: bash/grep-pid
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- bash/grep-pid	
++++ bash/grep-pid	
+@@ -0,0 +1,3 @@
++#!/usr/bin/env bash
++
++ps aux | grep -i $1 | grep -v grep | awk '{print $2, $11}'
+\ No newline at end of file
+Index: src/main/java/org/misha/contractor/messages/send/impl/SumMessageSender.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/org/misha/contractor/messages/send/impl/SumMessageSender.java	
++++ src/main/java/org/misha/contractor/messages/send/impl/SumMessageSender.java	
+@@ -28,7 +28,7 @@
+ 
+     @Override
+     public void send(Message<?> m) {
+-        log.debug("\n\nSender: {};\nmessage: {}", this.getClass().getSimpleName(), m);
++        log.debug("\n\n---------------\n\nSender: {};\nmessage: {}", this.getClass().getSimpleName(), m);
+         supplyAsync(() -> {
+             Sender.super.send(m);
+             return null;
+Index: bash/who-occupies-port
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- bash/who-occupies-port	
++++ bash/who-occupies-port	
+@@ -0,0 +1,3 @@
++#!/usr/bin/env bash
++
++lsof -i :$1
+Index: src/main/java/org/misha/customer/messages/send/impl/TermsMessageSender.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/org/misha/customer/messages/send/impl/TermsMessageSender.java	
++++ src/main/java/org/misha/customer/messages/send/impl/TermsMessageSender.java	
+@@ -17,7 +17,7 @@
+ public class TermsMessageSender implements Sender {
+     private final MessageChannel output;
+ 
+-    public TermsMessageSender(@Qualifier("output") MessageChannel channel) {
++    TermsMessageSender(@Qualifier("output") MessageChannel channel) {
+         this.output = channel;
+         log.debug("channel: {} is {}", output.getClass(), output);
+     }
+@@ -29,7 +29,7 @@
+ 
+     @Override
+     public void send(Message<?> m) {
+-        log.debug("\n\nSender: {};\nmessage: {}", this.getClass().getSimpleName(), m);
++        log.debug("\n\n---------------\n\nSender: {};\nmessage: {}", this.getClass().getSimpleName(), m);
+         supplyAsync(() -> {
+             Sender.super.send(m);
+             return null;
+Index: src/main/java/org/misha/contractor/service/Adder.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/org/misha/contractor/service/Adder.java	
++++ src/main/java/org/misha/contractor/service/Adder.java	
+@@ -0,0 +1,15 @@
++package org.misha.contractor.service;
++
++import org.springframework.stereotype.Component;
++
++import java.util.concurrent.Future;
++
++import static java.util.concurrent.CompletableFuture.supplyAsync;
++
++@Component
++public class Adder {
++
++    public Future<Integer> sum(int left, int right) {
++        return supplyAsync(() -> left + right);
++    }
++}
+Index: bash/create-topics
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- bash/create-topics	
++++ bash/create-topics	
+@@ -0,0 +1,8 @@
++#!/usr/bin/env bash
++
++export $(grep -v '^#' ./environment.properties | xargs)
++if [ ! "$(ps axf | grep kafka | grep -v grep)" ]; then
++    echo "Kafka server haven\'t been started yet." exit 1;
++fi
++./make-topic customer-to-contractor
++./make-topic contractor-to-customer
+\ No newline at end of file
+Index: src/main/java/org/misha/customer/data/TermsMessageContent.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/org/misha/customer/data/TermsMessageContent.java	
++++ src/main/java/org/misha/customer/data/TermsMessageContent.java	
+@@ -0,0 +1,12 @@
++package org.misha.customer.data;
++
++import lombok.Data;
++import lombok.NoArgsConstructor;
++
++@Data
++@NoArgsConstructor
++public class TermsMessageContent {
++    private String id;
++    private int left;
++    private int right;
++}
+Index: src/main/java/org/misha/JsonGenerationException.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/org/misha/JsonGenerationException.java	
++++ src/main/java/org/misha/JsonGenerationException.java	
+@@ -0,0 +1,10 @@
++package org.misha;
++
++public class JsonGenerationException extends RuntimeException {
++    protected JsonGenerationException(final String message,
++                                      final Throwable cause
++
++    ) {
++        super(message, cause, false, true);
++    }
++}
+Index: src/main/java/org/misha/contractor/data/SumMessageContent.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/org/misha/contractor/data/SumMessageContent.java	
++++ src/main/java/org/misha/contractor/data/SumMessageContent.java	
+@@ -0,0 +1,12 @@
++package org.misha.contractor.data;
++
++import lombok.Data;
++import lombok.NoArgsConstructor;
++
++@Data
++@NoArgsConstructor
++public class SumMessageContent {
++    private int sum;
++    private int left;
++    private int right;
++}
+Index: bash/run
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- bash/run	
++++ bash/run	
+@@ -0,0 +1,14 @@
++#!/usr/bin/env bash
++
++cd ../target
++port=8090
++app=camunda-channels-0.0.1-SNAPSHOT
++x=`echo $(lsof -i :${port})`
++if [[ ! ${x} ]]; then
++    java -jar ${app}.jar
++    google-chrome-stable http://localhost:${port}
++else
++    echo "port already in use"
++    exit 1
++fi
++
+Index: src/main/resources/application.properties
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/resources/application.properties	
++++ src/main/resources/application.properties	
+@@ -26,7 +26,7 @@
+ camunda.bpm.filter.create=All
+ camunda.bpm.license-file=file:${user.home}/.camunda/license.txt
+ 
+-logging.file=../logs/camunda-template-0.log
++logging.file=../../logs/camunda-channels.log
+ logging.level.org.apache.tomcat=info
+ logging.level.org.apache.catalina=info
+ logging.level.org.misha=DEBUG
+Index: bash/build
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- bash/build	
++++ bash/build	
+@@ -0,0 +1,3 @@
++#!/usr/bin/env bash
++cd ..
++mvn clean install
+\ No newline at end of file
+Index: src/main/java/org/misha/contractor/data/SumMessageContent.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/org/misha/contractor/data/SumMessageContent.java	
++++ src/main/java/org/misha/contractor/data/SumMessageContent.java	
+@@ -1,12 +0,0 @@
+-package org.misha.contractor;
+-
+-import lombok.Data;
+-import lombok.NoArgsConstructor;
+-
+-@Data
+-@NoArgsConstructor
+-public class SumMessageContent {
+-    private int sum;
+-    private int left;
+-    private int right;
+-}
Index: local_history.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- local_history.patch	(revision )
+++ local_history.patch	(revision )
@@ -0,0 +1,335 @@
+Index: src/main/java/org/misha/customer/data/TermsMessageContent.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/org/misha/customer/data/TermsMessageContent.java	(revision )
++++ src/main/java/org/misha/customer/data/TermsMessageContent.java	(revision )
+@@ -0,0 +1,12 @@
++package org.misha.customer.data;
++
++import lombok.Data;
++import lombok.NoArgsConstructor;
++
++@Data
++@NoArgsConstructor
++public class TermsMessageContent {
++    private String id;
++    private int left;
++    private int right;
++}
+Index: src/main/java/org/misha/customer/messages/send/impl/TermsSenderConfig.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/org/misha/customer/messages/send/impl/TermsSenderConfig.java	(revision )
++++ src/main/java/org/misha/customer/messages/send/impl/TermsSenderConfig.java	(revision )
+@@ -4,23 +4,14 @@
+ import org.springframework.beans.factory.annotation.Qualifier;
+ import org.springframework.context.annotation.Bean;
+ import org.springframework.context.annotation.Configuration;
+-import org.springframework.context.annotation.Primary;
+ import org.springframework.messaging.MessageChannel;
+ 
+ @Configuration
+ class TermsSenderConfig {
+-    @Autowired
+-    private MessageChannel output;//1
+ 
+     @Bean
+-    TermsMessageSender messageSender() {
+-        return new TermsMessageSender(output());
+-    }
+-
+-    @Bean
+-    @Qualifier("output")
+-    @Primary
+-    MessageChannel output() {
+-        return output;
++    @Autowired
++    TermsMessageSender messageSender(final @Qualifier("output") MessageChannel output) {
++        return new TermsMessageSender(output);
+     }
+ }
+\ No newline at end of file
+Index: src/main/java/org/misha/customer/messages/send/impl/TermsMessageSender.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/org/misha/customer/messages/send/impl/TermsMessageSender.java	(revision )
++++ src/main/java/org/misha/customer/messages/send/impl/TermsMessageSender.java	(revision )
+@@ -17,7 +17,7 @@
+ public class TermsMessageSender implements Sender {
+     private final MessageChannel output;
+ 
+-    public TermsMessageSender(@Qualifier("output") MessageChannel channel) {
++    TermsMessageSender(@Qualifier("output") MessageChannel channel) {
+         this.output = channel;
+         log.debug("channel: {} is {}", output.getClass(), output);
+     }
+@@ -29,7 +29,7 @@
+ 
+     @Override
+     public void send(Message<?> m) {
+-        log.debug("\n\nSender: {};\nmessage: {}", this.getClass().getSimpleName(), m);
++        log.debug("\n\n---------------\n\nSender: {};\nmessage: {}", this.getClass().getSimpleName(), m);
+         supplyAsync(() -> {
+             Sender.super.send(m);
+             return null;
+Index: src/main/java/org/misha/customer/TermsMessageContent.java
+===================================================================
+--- src/main/java/org/misha/customer/TermsMessageContent.java	(revision )
++++ src/main/java/org/misha/customer/TermsMessageContent.java	(revision )
+@@ -1,12 +0,0 @@
+-package org.misha.customer;
+-
+-import lombok.Data;
+-import lombok.NoArgsConstructor;
+-
+-@Data
+-@NoArgsConstructor
+-public class TermsMessageContent {
+-    private String id;
+-    private int left;
+-    private int right;
+-}
+Index: src/main/java/org/misha/contractor/data/SumMessageContent.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/org/misha/contractor/data/SumMessageContent.java	(revision )
++++ src/main/java/org/misha/contractor/data/SumMessageContent.java	(revision )
+@@ -0,0 +1,12 @@
++package org.misha.contractor.data;
++
++import lombok.Data;
++import lombok.NoArgsConstructor;
++
++@Data
++@NoArgsConstructor
++public class SumMessageContent {
++    private int sum;
++    private int left;
++    private int right;
++}
+Index: src/main/java/org/misha/contractor/service/Adder.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/org/misha/contractor/service/Adder.java	(revision )
++++ src/main/java/org/misha/contractor/service/Adder.java	(revision )
+@@ -0,0 +1,15 @@
++package org.misha.contractor.service;
++
++import org.springframework.stereotype.Component;
++
++import java.util.concurrent.Future;
++
++import static java.util.concurrent.CompletableFuture.supplyAsync;
++
++@Component
++public class Adder {
++
++    public Future<Integer> sum(int left, int right) {
++        return supplyAsync(() -> left + right);
++    }
++}
+Index: src/main/java/org/misha/contractor/messages/send/impl/SumMessageSender.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/org/misha/contractor/messages/send/impl/SumMessageSender.java	(revision )
++++ src/main/java/org/misha/contractor/messages/send/impl/SumMessageSender.java	(revision )
+@@ -28,7 +28,7 @@
+ 
+     @Override
+     public void send(Message<?> m) {
+-        log.debug("\n\nSender: {};\nmessage: {}", this.getClass().getSimpleName(), m);
++        log.debug("\n\n---------------\n\nSender: {};\nmessage: {}", this.getClass().getSimpleName(), m);
+         supplyAsync(() -> {
+             Sender.super.send(m);
+             return null;
+Index: src/main/java/org/misha/contractor/messages/receive/CustomersMessageListener.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/org/misha/contractor/messages/receive/CustomersMessageListener.java	(revision )
++++ src/main/java/org/misha/contractor/messages/receive/CustomersMessageListener.java	(revision )
+@@ -32,7 +32,7 @@
+ 
+     @StreamListener(target = Sink.INPUT, condition = "(headers['messageType']?:'').startsWith('Terms')")
+     public void messageReceived(String messageJson) throws Exception {
+-        log.debug("\n\n---------------\n\nReceiver: {};\n json received={}", getClass().getSimpleName(), messageJson);
++        log.debug("\n\n---------------\n\nReceiver: json received={}", messageJson);
+         final TypeReference<Message<TermsMessageContent>> typeRef =
+                 new TypeReference<Message<TermsMessageContent>>() {};
+         final Message<TermsMessageContent> message = new ObjectMapper().readValue(messageJson, typeRef);
+Index: src/main/java/org/misha/contractor/SumMessageContent.java
+===================================================================
+--- src/main/java/org/misha/contractor/SumMessageContent.java	(revision )
++++ src/main/java/org/misha/contractor/SumMessageContent.java	(revision )
+@@ -1,12 +0,0 @@
+-package org.misha.contractor;
+-
+-import lombok.Data;
+-import lombok.NoArgsConstructor;
+-
+-@Data
+-@NoArgsConstructor
+-public class SumMessageContent {
+-    private int sum;
+-    private int left;
+-    private int right;
+-}
+Index: src/main/java/org/misha/contractor/Adder.java
+===================================================================
+--- src/main/java/org/misha/contractor/Adder.java	(revision )
++++ src/main/java/org/misha/contractor/Adder.java	(revision )
+@@ -1,15 +0,0 @@
+-package org.misha.contractor;
+-
+-import org.springframework.stereotype.Component;
+-
+-import java.util.concurrent.Future;
+-
+-import static java.util.concurrent.CompletableFuture.supplyAsync;
+-
+-@Component
+-public class Adder {
+-
+-    public Future<Integer> sum(int left, int right) {
+-        return supplyAsync(() -> left + right);
+-    }
+-}
+Index: src/main/java/org/misha/JsonGenerationException.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/org/misha/JsonGenerationException.java	(revision )
++++ src/main/java/org/misha/JsonGenerationException.java	(revision )
+@@ -0,0 +1,10 @@
++package org.misha;
++
++public class JsonGenerationException extends RuntimeException {
++    protected JsonGenerationException(final String message,
++                                      final Throwable cause
++
++    ) {
++        super(message, cause, false, true);
++    }
++}
+Index: src/main/resources/application.properties
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/resources/application.properties	(revision )
++++ src/main/resources/application.properties	(revision )
+@@ -26,7 +26,7 @@
+ camunda.bpm.filter.create=All
+ camunda.bpm.license-file=file:${user.home}/.camunda/license.txt
+ 
+-logging.file=../logs/camunda-template-0.log
++logging.file=../../logs/camunda-channels.log
+ logging.level.org.apache.tomcat=info
+ logging.level.org.apache.catalina=info
+ logging.level.org.misha=DEBUG
+Index: bash/run
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- bash/run	(revision )
++++ bash/run	(revision )
+@@ -0,0 +1,14 @@
++#!/usr/bin/env bash
++
++cd ../target
++port=8090
++app=camunda-channels-0.0.1-SNAPSHOT
++x=`echo $(lsof -i :${port})`
++if [[ ! ${x} ]]; then
++    java -jar ${app}.jar
++    google-chrome-stable http://localhost:${port}
++else
++    echo "port already in use"
++    exit 1
++fi
++
+Index: bash/build
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- bash/build	(revision )
++++ bash/build	(revision )
+@@ -0,0 +1,3 @@
++#!/usr/bin/env bash
++cd ..
++mvn clean install
+\ No newline at end of file
+Index: bash/grep-pid
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- bash/grep-pid	(revision )
++++ bash/grep-pid	(revision )
+@@ -0,0 +1,3 @@
++#!/usr/bin/env bash
++
++ps aux | grep -i $1 | grep -v grep | awk '{print $2, $11}'
+\ No newline at end of file
+Index: bash/create-topics
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- bash/create-topics	(revision )
++++ bash/create-topics	(revision )
+@@ -0,0 +1,8 @@
++#!/usr/bin/env bash
++
++export $(grep -v '^#' ./environment.properties | xargs)
++if [ ! "$(ps axf | grep kafka | grep -v grep)" ]; then
++    echo "Kafka server haven\'t been started yet." exit 1;
++fi
++./make-topic customer-to-contractor
++./make-topic contractor-to-customer
+\ No newline at end of file
+Index: bash/who-occupies-port
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- bash/who-occupies-port	(revision )
++++ bash/who-occupies-port	(revision )
+@@ -0,0 +1,3 @@
++#!/usr/bin/env bash
++
++lsof -i :$1
+Index: bash/build.sh
+===================================================================
+--- bash/build.sh	(revision )
++++ bash/build.sh	(revision )
+@@ -1,3 +0,0 @@
+-#!/usr/bin/env bash
+-cd ..
+-mvn clean install
+\ No newline at end of file
+Index: bash/run.sh
+===================================================================
+--- bash/run.sh	(revision )
++++ bash/run.sh	(revision )
+@@ -1,3 +0,0 @@
+-#!/usr/bin/env bash
+-cd ../target
+-java -jar camunda-channels-0.0.1-SNAPSHOT.jar
+\ No newline at end of file
